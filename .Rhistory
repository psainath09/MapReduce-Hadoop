str(titanic)
titanic <- titanic[-c(1,4)]
View(titanic)
colnames(titanic)
titanic <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\adm\\week1\\titanic.csv")
colnames(titanic)
titanic <- titanic[-c(1,4,9)]
View(titanic)
table(titanic$Survived)
sum(is.null(titanic))
sum(is.null(titanic$Age))
sum(is.na(titanic$Age))
y <- titanic$Survived
y <- factor(y,levels = c(0,1),labels = c("No","Yes"))
table(y)
View(titanic)
prop.table(table(y))
barplot(table(y))
library(caret)
library(caTools)
sum(is.na(titanic$Age))
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,FUN = mean(titanic$Age)),titanic$Age)
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,mean(titanic$Age)),titanic$Age)
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,mean(titanic$Age)),titanic$Age)
sum(is.na(titanic$Age))
titanic$Age <- ifelse(is.na(titanic$Age),mean(titanic$Age),titanic$Age)
sum(is.na(titanic$Age))
split= sample.split(titanic$Survived,SplitRatio = 2/3)
set.seed(23)
split= sample.split(titanic$Survived,SplitRatio = .75)
train <- subset(titanic,split==TRUE)
test <- subset(titanic,split==FALSE)
View(train)
df <- titanic[,c("Survived","Sex")]
df$Survived <- factor(df$Survived, levels = c(0,1),labels = c("No","Yes"))
training <- subset(df,split==TRUE)
testing <- subset(df,split==FALSE)
table(training$Survived,training$Sex)
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,FUN = function(x) mean(x,na.rm=TRUE)),titanic$Age)
View(titanic)
library(gmodels)
library(caret)
library(e1071)
library(ModelMetrics)
install.packages("ROCR")
titanic <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\adm\\week1\\titanic.csv",header = T,na.strings = c(""),stringsAsFactors = T)
View(titanic)
titanic <- titanic[-c(1,4,9)]
View(titanic)
titanic$Survived <- factor(titanic$Survived,levels=c(0,1),labels = c("No","Yes"))
View(titanic)
titanic <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\adm\\week1\\titanic.csv",header = T,na.strings = c(""),stringsAsFactors = T)
titanic <- titanic[-c(1,4,9)]
titanic$Survived <- factor(titanic$Survived,levels=c(0,1),labels = c("No","Yes"))
titanic$Pclass <- as.factor(titanic$Pclass)
titanic <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\adm\\week1\\titanic.csv",header = T,na.strings = c(""),stringsAsFactors = T)
colnames(titanic)
titanic <- titanic[-c(1,4,9,11)]
titanic$Survived <- factor(titanic$Survived,levels=c(0,1),labels = c("No","Yes"))
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$Embarked[c(62,830)]
titanic$Embarked[c(62)]
is.na(titanic$Embarked)
which(is.na(titanic$Embarked))
mode(titanic$Embarked)
titanic$Embarked[c(62,830)] <- 'C'
library(mice)
mice_mod <- mice(titanic[,c('Age')],method = "rf")
mice_mod <- mice(titanic[,'Age'],method = "rf")
mice_mod <- mice(titanic$Age,method = "rf")
titanic$Age <- as.data.frame(titanic$Age)
mice_mod <- mice(titanic$Age,method = "rf")
mice_mod <- mice(titanic[,!names(titanicData) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], ,method = "rf")
mice_mod <- mice(titanic[,!names(titanic) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], ,method = "rf")
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,FUN = function(x) mean(x,na.rm=TRUE)),titanic$Age)
titanic <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\adm\\week1\\titanic.csv",header = T,na.strings = c(""),stringsAsFactors = T)
titanic <- titanic[-c(1,4,9,11)]
titanic$Survived <- factor(titanic$Survived,levels=c(0,1),labels = c("No","Yes"))
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$Embarked[c(62,830)] <- 'C'
titanic$Age <- ifelse(is.na(titanic$Age),ave(titanic$Age,FUN = function(x) mean(x,na.rm=TRUE)),titanic$Age)
sum(is.na(titanic))
sum(is.na(titanic$Age))
titanic$child[titanic$Age<18] <- "Yes"
titanic$child[titanic$Age>=18] <- "No"
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
titanic$child <- factor(titanic$child)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
titanic$Fsize <- titanic$SibSp+titanic$Parch+1
titanic$Fsize <- titanic$SibSp+titanic$Parch+1
titanic$FsizeD[titanic$Fsize == 1] <- 'singleton'
titanic$FsizeD[titanic$Fsize < 5 & titanic$Fsize > 1] <- 'small'
titanic$FsizeD[titanic$Fsize > 4] <- 'large
titanic$FsizeD <- as.factor(titanic$FsizeD)
titanic$FsizeD[titanic$Fsize == 1] <- 'singleton'
titanic$FsizeD[titanic$Fsize < 5 & titanic$Fsize > 1] <- 'small'
titanic$FsizeD[titanic$Fsize > 4] <- 'large'
titanic$FsizeD <- as.factor(titanic$FsizeD)
titanic$FsizeD[titanic$Fsize == 1] <- 'singleton'
titanic$FsizeD[titanic$Fsize < 5 & titanic$Fsize > 1] <- 'small'
titanic$FsizeD[titanic$Fsize > 4] <- 'large'
titanic$FsizeD <- as.factor(titanic$FsizeD)
contrasts(titanic$Sex)
library(caTools)
set.seed(23)
split= sample.split(titanic$Survived,SplitRatio = .75)
train <- subset(titanic,split==TRUE)
test <- subset(titanic,split==FALSE)
logit <- glm(Survived ~ .,family = binomial(link='logit'),data=train)
summary(logit)
plot(logit)
logit.prediction <- predict(logit,newdata=test,type="response")
logit.prediction <- predict(logit,newdata=test,type="response")
results.logit <- ifelse(logit.prediction>0.5,"Yes","No")
confusionMatrix(test$Survived,results.logit)
logit <- glm(Survived ~ .,family = binomial(link='logit'),data=train)
logit.prediction <- predict(logit,newdata=test)
logit.prediction <- predict(logit,ata=test)
results.logit <- ifelse(logit.prediction>0.5,"Yes","No")
confusionMatrix(test$Survived,results.logit)
View(results.logit)
logit <- glm(Survived ~ .,family = binomial(link='logit'),data=train)
summary(logit)
plot(logit)
logit.prediction <- predict(logit,data=test)
results.logit <- ifelse(logit.prediction>0.5,"Yes","No")
View(results.logit)
results.logit
summary(results.logit)
summary(test)
summary(test$Survived)
logit <- glm(Survived ~ .,family = binomial(link='logit'),data=train)
logit.prediction <- predict(logit,newdata=test,type='response')
logit.prediction <- predict(logit,newdata=test)
logit <- glm(Survived ~ .,family = binomial(link='logit'),data=train)
logit.prediction <- predict(logit,newdata=test)
logit <- glm(Survived ~ .,family = binomial(link="logit"),data=train)
logit.prediction <- predict(logit,newdata=test)
logit.prediction <- predict(logit,data=test)
results.logit <- ifelse(logit.prediction>0.5,"Yes","No")
confusionMatrix(test$Survived,results.logit)
n <- sapply(titanic,function(x){is.numeric(x)})
n
numerics <- titanic[,n]
numerics
summary(numerics)
normalize <- function(x)
{
return((x-min(x))/(max(x)-min(x)) )
}
numericalnorms <- normalize(numerics)
summary(numericalnorms)
titanicDataKNN <- titanic[,!n]
titanicDataKNN <- cbind(titanicDataKNN,numericalnorms)
View(titanicDataKNN)
install.packages("dummies")
library(dummies)
library(dummies)
tknn <- dummy.data.frame(titanicDataKNN[,-1])
View(tknn)
View(tknn)
tknn$Survived <- titanicDataKNN$Survived
knntraining <- subset(tknn, split==TRUE)
knntest <- subset(tknn,split==FALSE)
View(knntraining)
library(class)
knn1 <- knn(train=knntraining,test=knntest,cl=knntraining$Survived,k=3)
View(knntraining)
sum(is.na(knntraining$Survived))
knn1 <- knn(train=knntraining,test=knntest,cl=knntraining$Survived,k=3)
knn1 <- knn(train=knntraining,test=knntest,class=knntraining$Survived,k=3)
knn1 <- knn(train=knntraining,test=knntest,cl=knntraining$Survived,k=3)
knn1 <- knn(train=knntraining,test=knntest,cl=knntraining[,1],k=3)
knn1 <- knn(train=knntraining[,-1],test=knntest[,-1],cl=knntraining[,1],k=3)
names(knntraining)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=3)
y <- predict(knn, newdata=knntest[,-19])
table(knntest[,19],knn1)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=7)
table(knntest[,19],knn1)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=5)
table(knntest[,19],knn1)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=6)
table(knntest[,19],knn1)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=6)
table(knntest[,19],knn1)
x <-table(knntest[,19],knn1)
x
x <- confusionMatrix(knntest[,19],knn1)
x
View(titanic)
table(titanic$SibSp)
table(titanic$Parch)
titanic$SibSp<- as.factor(titanic$SibSp)
table(titanic$SibSp)
titanic$Parch <- as.factor(titanic$Parch)
par(mfrow=c(1,2))
hist(titanic$Fare,breaks=30)
hist(titanic$Age)
titanic$FareBinned <- cut(titanic$Fare, breaks=c(0,10,50,max(titanic$Fare)),labels = c("low","middle","high"))
View(titanic)
table(titanic$FareBinned,titanic$Pclass)
titanic$AgeBinned <- cut(titanic$Age, breaks = c(0,10,20,30,40,50,60,70,max(titanic$Age)), labels=c("0-10", "10-20", "20-30", "30-40", "40-50", "50-60", "60-70", "70+"))
table(titanicData$AgeBinned)
table(titanic$AgeBinned)
View(titanic)
naivedata <- titanic
colnames(naivedata)
str(naivedata)
typeof(naivedata)
colnames(naivedata)
naivedata <- naivedata[-c(2,7,10)]
View(naivedata)
colnames(naivedata)
naivedata <- naivedata[-3]
View(naivedata)
str(naivedata)
naivetrain <- subset(naivedata,split==TRUE)
naivetest <- subset(naivedata,split==FALSE)
nb <- naiveBayes(naivetrain[-1],naivetrain$Survived)
library(e1071)
nb <- naiveBayes(naivetrain[-1],naivetrain$Survived)
y <- predict(nb,naivetest[-1])
confusionMatrix(y,naivetest$Survived)
table(y,naivetest$Survived)
(108+51)/(108+35+29+51)
save(titanic,file="titanic.RData")
getwd()
library(C50)
cFifty <- C5.0(Survived~.,naivetrain,trails=10)
y <- predict(cFifty,naivetest[-1])
table(y,naivetest$Survived)
sales <- read.csv("C:/Users/satya naidu/Desktop/yash/Superstore_Data_One_Region_Per_Sheet.csv")
str(sales)
View(sales)
table(sales$Ship.Mode)
sales$Ship.Mode <- factor(sales$Ship.Mode,levels = c("First Class","Same Day","Second Class","Standard Class"),labels = c(1,2,3,4))
table(sales$Segment)
sales$Segment <- factor(sales$Segment,levels = c("Consumer","Corporate","Home Office"),labels = c(1,2,3))
table(sales$Country)
table(sales$State)
sales <- sales[-c("Country")]
sales <- sales[-"Country"]
sales$State <- factor(sales$State,levels = c("Arizzona","California","Colorado","Idaho","Montana","Nevada","New Mexico","Oregon","Utah","Washington","Wyoming"),labels = c(1,2,3,4,5,6,7,8,9,10,11))
table(sales$City)
sales$City <- as.factor(sales$City)
sales <- read.csv("C:/Users/satya naidu/Desktop/yash/Superstore_Data_One_Region_Per_Sheet.csv")
sales$Ship.Mode <- factor(sales$Ship.Mode,levels = c("First Class","Same Day","Second Class","Standard Class"),labels = c(1,2,3,4))
sales$Segment <- factor(sales$Segment,levels = c("Consumer","Corporate","Home Office"),labels = c(1,2,3))
sales$State <- factor(sales$State,levels = c("Arizona","California","Colorado","Idaho","Montana","Nevada","New Mexico","Oregon","Utah","Washington","Wyoming"),labels = c(1,2,3,4,5,6,7,8,9,10,11))
colnames(sales)
sales <- sales[-c(5,6)]
table(sales$Region)
colnames(sales)
sales <- sales[-c(6)]
table(sales$Category)
sales$Category <- factor(sales$Category, levels = c("Furniture","Office Supplies","Technology"),labels = c(1,2,3))
table(sales$Sub.Category)
colnames(sales)
sales <- sales[-c(7)]
library(caTools)
split= sample.split(sales$Profit,SplitRatio = 0.75)
train <- subset(sales, split==TRUE)
test <- subset(sales,split==FALSE)
set.seed(23)
split= sample.split(sales$Profit,SplitRatio = 0.75)
train <- subset(sales, split==TRUE)
test <- subset(sales,split==FALSE)
library(class)
regressor <- lm(formula = Profit ~ ., data = train)
y_pred <- predict(regressor,newdata=test)
colnames(sales)
sales <- sales[-c(1,2)]
library(caTools)
set.seed(23)
split= sample.split(sales$Profit,SplitRatio = 0.75)
train <- subset(sales, split==TRUE)
test <- subset(sales,split==FALSE)
regressor <- lm(formula = Profit ~ ., data = train)
y_pred <- predict(regressor,newdata=test)
y_pred <- predict(regressor,newdata=test)
regressor <- lm(formula = Profit ~ ., data = train)
y_pred <- predict(regressor,newdata=test)
table(y_pred,test$Profit)
View(y_pred)
View(sales)
library(class)
regressor <- lm(formula = Profit ~ ., data = train)
y_pred <- predict(regressor,newdata=test)
library(e1071)
?svr
??svr
svr <- svm(formula = Profit ~ .,
data = train,
type = 'eps-regression',
kernel = 'radial')
svr_predict <- predict(svr,test)
library(ggplot2)
ggplot() +
geom_point(aes(x = sales$State, y = sales$Profit),
colour = 'red') +
geom_line(aes(x = sales$State, y = predict(svr, newdata = train)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = sales$State, y = sales$Profit),
colour = 'red')
library(ggplot2)
ggplot() +
geom_point(aes(x = sales$State, y = sales$Profit),
colour = 'red') +
geom_line(aes(x = sales$State, y = svr_predict),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
svr_predict <- predict(svr,sales)
library(ggplot2)
ggplot() +
geom_point(aes(x = sales$State, y = sales$Profit),
colour = 'red') +
geom_line(aes(x = sales$State, y = svr_predict),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = sales$State, y = sales$Profit),
colour = 'red') +
geom_line(aes(x = sales$State, y = svr_predict),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('State') +
ylab('Profit')
View(sales)
summary(regressor)
y_pred
y_pred
summary(regressor)
sales <- read.csv("C:/Users/satya naidu/Desktop/yash/Superstore_Data_One_Region_Per_Sheet.csv")
colnames(sales)
View(sales)
sales <- sales[-c(1,2,5,6,8,10)]
sales$Ship.Mode <- factor(sales$Ship.Mode,levels = c("First Class","Same Day","Second Class","Standard Class"),labels = c(1,2,3,4))
sales$Segment <- factor(sales$Segment,levels = c("Consumer","Corporate","Home Office"),labels = c(1,2,3))
sales$State <- factor(sales$State,levels = c("Arizona","California","Colorado","Idaho","Montana","Nevada","New Mexico","Oregon","Utah","Washington","Wyoming"),labels = c(1,2,3,4,5,6,7,8,9,10,11))
sales$Category <- factor(sales$Category, levels = c("Furniture","Office Supplies","Technology"),labels = c(1,2,3))
View(titanicDataKNN)
tknn <- dummy.data.frame(titanicDataKNN[,-1])
library(dummies)
library(dummies)
tknn <- dummy.data.frame(titanicDataKNN[,-1])
View(tknn)
library(class)
knn1 <- knn(train=knntraining[,-19],test=knntest[,-19],cl=knntraining[,19],k=6)
x <-table(knntest[,19],knn1)
x <- confusionMatrix(knntest[,19],knn1)
x
View(titanic)
library(rpart.plot)
library(rpart)
library(RColorBrewer)
View(train)
regressionTree <- rpart(Survived~.,data = train,method = "class")
plot(regressionTree)
text(regressionTree)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(regressionTree)
set.seed(23)
wcss <- vector()
for(i in 1:10)
{
wcss[i] <- sum(kmeans(iris,i)$withinss)
}
View(iris)
irisdata <- iris[-5]
for(i in 1:10)
{
wcss[i] <- sum(kmeans(irisdata,i)$withinss)
}
plot(1:10,wcss)
plot(1:10,wcss,type="b")
clusterpca <- prcomp(irisdata,scale. = T,center = T)
autoplot(clusterpca,data=irisdata,colour="species")
library(ggfortify)
library(ggplot2)
library(ggfortify)
autoplot(clusterpca,data=irisdata,colour="species")
autoplot(clusterpca,data=iris,colour="species")
View(iris)
autoplot(clusterpca,data=iris,colour="Species")
getwd()
setwd("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\\project\\satya\\")
setwd("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\")
datas <- read.csv("weatherHistory.csv")
View(datas)
str(datas)
names(datas)
datas <- datas[-12]
library(lubridate)
datas$Formatted.Date <- ymd(datas$Formatted.Date)
datas <- read.csv("weatherHistory.csv")
datas <- datas[-12]
datas$Formatted.Date <- as.Date(datas$Formatted.Date,%y/%m/%d)
datas$Formatted.Date <- as.Date(datas$Formatted.Date,"%y/%m/%d")
datas <- read.csv("weatherHistory.csv")
datas <- datas[-12]
datas$Formatted.Date <- as.Date(datas$Formatted.Date,"%m/%d/%Y")
datas <- read.csv("weatherHistory.csv")
datas <- datas[-12]
datas$Formatted.Date <- system.time(as.Date(datas$Formatted.Date, "%m/%d/%Y"))
datas$Formatted.Date <- format(as.POSIXct(strptime(datas$Formatted.Date,"%d/%m/%Y %H:%M",tz="")) ,format = "%d/%d/%Y")
datas <- read.csv("weatherHistory.csv")
datas$Formatted.Date <- format(as.POSIXct(strptime(datas$Formatted.Date,"%d/%m/%Y %H:%M",tz="")) ,format = "%d/%m/%Y")
datas <- read.csv("weatherHistory.csv")
datas <- datas[-12]
?gsub
?seperate
?separate
library(tidyr)
library(dplyr)
?separate
datas %>% separate(datas$Formatted.Date,into=c("date","x"),sep=" ")
datas %>% separate(datas$Formatted.Date,c("date","x"),sep=" ")
datas %>% separate(datas$Formatted.Date,c("date","x"))
datas %>% separate(datas$Formatted.Date,c("date","x"),sep=" ")
separate(datas,datas$Formatted.Date,c("date","x"),sep=" ")
separate(datas,datas$Formatted.Date,c("date"),sep=" ")
separate(datas,datas$Formatted.Date,("date"),sep=" ")
datas$Formatted.Date <- as.character(datas$Formatted.Date)
separate(datas,datas$Formatted.Date,("date"),sep=" ")
separate(datas,datas$Formatted.Date,c("date","x"),sep=" ")
separate(datas,datas$Formatted.Date,into=c("date","x"),sep=" ")
datas <- read.csv("weatherHistory.csv")
separate(datas,datas$Formatted.Date,into=c("date","x"),sep=" ")
separate(datas,Formatted.Date,into=c("date","x"),sep=" ")
View(datas)
datas <- separate(datas,Formatted.Date,into=c("date","x"),sep=" ")
names(datas)
datas <- datas[-c(2,13)]
View(datas)
write.csv(datas,weather_data.csv)
write.csv(datas,"weather_data.csv")
hive1 <- read.csv("D:\DATA ANALYTICS\ASSIGNMENT\2nd sem\pda\ca1\shared\project\satya\hive_output\HiveTask_Output1\hiveoutput1.csv")
hive1 <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\hive_output\\HiveTask_Output1\\hiveoutput1.csv")
hive2 <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\hive_output\\HiveTask_Output2\\hiveoutput2.csv")
hive1 <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\hive_output\\HiveTask_Output1\\hiveoutput1.csv")
hive2 <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\hive_output\\HiveTask_Output2\\hiveoutput2.csv")
pig <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\pig_output\\pigoutput.csv")
View(hive1)
View(hive2)
View(pig)
pig$X..ADUR.. <- gsub(["a-zA-Z"],"",pig$X..ADUR..)
pig$X..ADUR.. <- gsub("[a-zA-Z]","",pig$X..ADUR..)
View(pig)
pig <- read.csv("D:\\DATA ANALYTICS\\ASSIGNMENT\\2nd sem\\pda\\ca1\\shared\\project\\satya\\pig_output\\pigoutput.csv")
pig$X..ADUR.. <- gsub("[^a-zA-Z]","",pig$X..ADUR..)
View(pig)
View(hive1)
ggplot(hive1,aes(x=Property_type,y=Avg_price))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=paste(Avg_price,"$")),vjust=-0.3, size=3.5)+labs(title="Average house price according to house type")
library(ggplot2)
library(reshape)
theme_set(theme_classic())
ggplot(hive1,aes(x=Property_type,y=Avg_price))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=paste(Avg_price,"$")),vjust=-0.3, size=3.5)+labs(title="Average house price according to house type")
hive1 <- hive1[!hive1$Property_type=="O",]
ggplot(hive1,aes(x=Property_type,y=Avg_price))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=paste(Avg_price,"$")),vjust=-0.3, size=3.5)+labs(title="Average house price according to house type")
ggplot(hive1,aes(x=Property_type,y=Avg_price))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=paste(Avg_price,"$")),vjust=-0.3, size=3.5)+labs(title="Average house price according to house type")+coord_flip()
ggplot(hive1,aes(x=Property_type,y=Avg_price))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=paste(Avg_price,"$")),vjust=0.3, size=3.5)+labs(title="Average house price according to house type")+coord_flip()
View(hive2)
ggplot(hive2,aes(x=Duration,y=Max))+geom_violin(trim=FALSE)
ggplot(hive2,aes(x=Duration,y=Max))+geom_line()
ggplot(hive2,aes(x=Duration,y=Max,group=1))+geom_line()
ggplot(hive2,aes(x=Duration,y=Max,group=1,colour="Max"))+geom_line()
ggplot(hive2,aes(x=Duration,y=Max,group=1,colour="Max"))+geom_line()+geom_text(vjust=0, colour="green")
ggplot(hive2,aes(x=Duration,y=Max,group=1,colour="Max"))+geom_line()+geom_text(label=Max,vjust=0, colour="green")
ggplot(hive2,aes(x=Duration,y=Max,group=1,colour="Max"))+geom_line()+geom_text(label=hive2$Max,vjust=0, colour="green")
ggplot(hive2,aes(x=Duration,y=Max,group=1,colour="Max"))+geom_line()+geom_text(label=hive2$Max,vjust=0, colour="blue")
popularity <- order(pig$X..ADUR..,decreasing = T)
popularity <- pig[Exppopularityensive,]
popularity <- pig[popularity,]
popularity <- as.data.frame(popularity)
popularity <- popularity[1:10,]
popularity
View(popularity)
View(pig)
View(pig)
popularity <- order(pig$X..ADUR..,decreasing = T)
View(popularity)
popularity <- pig[popularity,]
View(popularity)
popularity <- as.data.frame(popularity)
View(popularity)
popularity <- order(pig$X..ADUR..,decreasing = T)
View(popularity)
popularity <- pig[popularity,]
View(popularity)
popularity <- as.data.frame(popularity)
popularity <- popularity[1:10,]
popularity <- popularity[1:10,]
table(popularity)
View(popularity)
names(pig)
names(popularity)
ggplot(pig,aes(x=X..ADUR..,y=X257))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=X257),vjust=0.3, size=3.5)+labs(title="Average house price according to house type")+coord_flip()
ggplot(popularity,aes(x=X..ADUR..,y=X257))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=X257),vjust=0.3, size=3.5)+labs(title="Average house price according to house type")+coord_flip()
ggplot(popularity,aes(x=X..ADUR..,y=X257))+geom_bar(stat="identity",width = 0.5, fill="tomato2")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=X257),vjust=0.3, size=3.5)+labs(title="Most Popular Cities according to house purchase")+coord_flip()
ggplot(popularity,aes(x=X..ADUR..,y=X257))+geom_bar(stat="identity",width = 0.5, fill="tomato")+theme(axis.text.x = element_text(angle=65, vjust=0.6))+geom_text(aes(label=X257),vjust=0.3, size=3.5)+labs(title="Most Popular Cities according to house purchase")+coord_flip()
